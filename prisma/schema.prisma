generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  extensions = [vector]
}

model Session {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model User {
  id         Int       @id @default(autoincrement())
  telegramId BigInt    @unique @map("telegram_id")
  username   String    @default("Unknown")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  thoughts   Thought[] // One-to-many relationship with Thought
  embeddings   Embedding[] // One-to-many relationship with Thought
  bookmarks   Bookmark[] // One-to-many relationship with Thought
  folders   Folder[] // One-to-many relationship with Thought
  // summaries  Summary[] // One-to-many relationship with Summary

  @@map("users")
}

model Thought {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  embeddings   Embedding[] // One-to-many relationship with Thought
  // summaries ThoughtSummary[]

  @@map("thoughts")
}

model Embedding {
  id          Int       @id @default(autoincrement())
  content     String
  embedding   Unsupported("vector")? // Store embedding as an array of floats
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  thoughtId   Int?      // Nullable foreign key for Thought
  thought     Thought?  @relation(fields: [thoughtId], references: [id], onDelete: Cascade)
  bookmarkId  Int?      // Nullable foreign key for Bookmark
  bookmark    Bookmark? @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  updatedAt   DateTime  @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@map("embeddings")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  content   String   @default("default content")
  // folder   String    @default("Bookmarks")
  name   String    @default("My bookmark")
  link   String
  userId    Int      @default(1)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId    Int
  folder   Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  embeddings   Embedding[] // One-to-many relationship with Thought
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  @@unique([userId, link])
  @@map("bookmarks")
}

model Folder {
  id        Int      @id @default(autoincrement())
  name   String   @default("Favourites")
  bookmarks   Bookmark[] // One-to-many relationship with Thought
  userId    Int      @default(1)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  @@map("folders")
}
// model Summary {
//   id        Int      @id @default(autoincrement())
//   content   String
//   userId    Int
//   user      User     @relation(fields: [userId], references: [id])
//   updatedAt DateTime @updatedAt @map("updated_at")
//   createdAt DateTime @default(now()) @map("created_at")
//   thoughts  ThoughtSummary[]

//   @@map("summaries")
// }

// model ThoughtSummary {
//   thoughtId Int
//   summaryId Int
//   thought   Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)
//   summary   Summary @relation(fields: [summaryId], references: [id], onDelete: Cascade)

//   @@id([thoughtId, summaryId])
// }
